
* ipython notebook
need to install jupyter instead of ipython notebook

pip3 install jupyter
maybe also need to run
pip3 install notebook (note sure)


And then before use the package inside emacs, need to start notebook using the following command:

ipython notebook (shouldn't use jupyter command here)
* shell

** read profile for shell
 eshell can't read profile. But shell is able to read profile
 http://stackoverflow.com/questions/16107820/how-to-make-emacs-s-shell-mode-source-my-profile-file 
You can create a file ~/.emacs_zsh (or .emacs_bash, emacs_sh, ...) that shell-mode will use on startup. My .emacs_bash is simply:
. ~/.profile
Just be sure to put a newline at the end of the sourcing line or it won't get executed.
** run the last command
[[http://stackoverflow.com/questions/10055338/command-history-in-emacs-shell-mode][Command history in emacs shell mode]]
* emacs started from shell can't access remote server
check whether there is proxy set. If we set proxy in shell profile, then every connection to the remote server will use that proxy. one workaround is to set the no_proxy value
#+BEGIN_SRC bash
export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com,.github.com"
#+END_SRC

* shortcut (key bidding)
** get the all the key biddings available
SPC + h + d + b
or just type the function of 
describe_biddings
** switch between alternative buffer
SPACE + TAB
** helm follow mode
http://emacs.stackexchange.com/questions/27783/helm-find-projectile-file-how-to-view-the-file-content-when-choose-the-file
Add C-z or whatever key you want for helm-execute-persistent-action to helm-map first (define-key helm-map (kbd "C-z") 'helm-execute-persistent-action)
#+BEGIN_SRC elisp
(define-key helm-map (kbd "C-z") 'helm-execute-persistent-action)
#+END_SRC
** scroll other window
check the funciton like scroll window. And it will show the key bidding to those function
M + Pageup
M + PageDown
** magit
*** show the commit content without change window focus
 http://emacs.stackexchange.com/questions/27798/how-to-view-each-commit-in-magit-easily
 magit-diff-show-or-scroll-up

 in spacemacs it mapps to Shift + Space

** all possible shortcut
use Meta + X
** fold python
https://github.com/syl20bnr/spacemacs/issues/5047
in normal mode: z + a
** kill ring

helm-show-kill-ring
Use the SPC + r + y

* good setting
** automatically copy text selected with the mouse
 http://pragmaticemacs.com/emacs/automatically-copy-text-selected-with-the-mouse/
   (setq mouse-drag-copy-region t)
** add the system clipboard to the emacs kill-ring 
http://pragmaticemacs.com/emacs/add-the-system-clipboard-to-the-emacs-kill-ring/
(setq save-interprogram-paste-before-kill t)
** kill this buffer
(global-set-key (kbd "C-x k") 'kill-this-buffer)
** overwrite selected text
(delete-selection-mode t)
* magit
http://emacs.stackexchange.com/questions/6083/magit-split-hunk-into-two-hunks?rq=1
http://emacs.stackexchange.com/questions/17711/how-do-i-simultaneously-view-multiple-diffs-with-magit?rq=1
* autosave after when switch window
http://emacsredux.com/blog/2014/03/22/a-peek-at-emacs-24-dot-4-focus-hooks/
#+BEGIN_SRC elisp
(add-hook 'focus-out-hook (lambda () (save-some-buffers t)))
#+END_SRC
* script
** some link
http://www.lunaryorn.com/posts/emacs-script-pitfalls.html
* tramp
** basic

http://stackoverflow.com/questions/37728737/in-emacs-host-name-must-not-match-ssh
#+BEGIN_SRC example
You don't use a proper Tramp file name. Try

C-x C-f /ssh:user@1.2.3.4:
See the trailing colon.


#+END_SRC


in emacs inital file, add the following:
http://emacs.stackexchange.com/questions/28061/edit-a-file-on-remote-server-using-an-existing-sessionby-clone-it
#+BEGIN_SRC elisp

  (setq tramp-use-ssh-controlmaster-options nil)

#+END_SRC

and in ssh configuration
#+BEGIN_SRC example

cat .ssh/config
host *
ControlMaster auto
ControlPath ~/.ssh/master-%r@%h:%p
ServerAliveInterval 60

#+END_SRC
** 2 fact authentication
just modify the variable of password-word-equivalents
#+BEGIN_SRC elisp

(defcustom password-word-equivalents
  '("password" "passcode" "passphrase" "pass phrase"
    ; These are sorted according to the GNU en_US locale.
    "암호"		; ko
    "Tap your Key" ; add the string which promp your to input more valiation code or string
    .....
)

#+END_SRC


since it was used in the follow code
#+BEGIN_SRC elisp

(defcustom tramp-password-prompt-regexp
  (format "^.*\\(%s\\).*:\^@? *"
	  (if (boundp 'password-word-equivalents)
	      (regexp-opt (symbol-value 'password-word-equivalents))
	    "password\\|passphrase"))
  "Regexp matching password-like prompts.
The regexp should match at end of buffer.

The `sudo' program appears to insert a `^@' character into the prompt."
  :version "24.4"
  :group 'tramp
  :type 'regexp)

#+END_SRC
** very cool stuff
http://gregorygrubbs.com/wordpress/emacs-power-remote-servers-and-shell-commands/
copied before if the above link is broken
http://note.youdao.com/noteshare?id=5c878a5df12f5217c55672775eb02cda
** traffer file without sftp
https://danlamanna.com/forget-scp-use-dired-dwim.html
** multiple hops


need to config .ssh/config on all the hops
* sql mode
https://truongtx.me/2014/08/23/setup-emacs-as-an-sql-database-client
https://lists.gnu.org/archive/html/help-gnu-emacs/2010-12/msg01075.html
https://github.com/tmtxt/.emacs.d/blob/master/config/tmtxt-sql.el
first set a variables as:

#+BEGIN_SRC elisp
(setq sql-connection-alist
        '((dev (sql-product 'mysql)
               (sql-port 3306)
               (sql-server "10.")
               (sql-user "sapph")
               (sql-password "s")
               (sql-database "s"))
          (prod (sql-product 'mysql)
                   (sql-port 5432)
                   (sql-server "localhost")
                   (sql-user "user")
                   (sql-password "password")
                   (sql-database "db2"))))

#+END_SRC


and then call sql-connect, it will popup a list based on the variable of sql-connection-alist
* elisp
** my code
*** run-shell-command-again from editor buffer
  #+BEGIN_SRC elisp

  (defun run-shell-command-again ()
    (interactive)
    (save-buffer (buffer-name))
    (other-window 1)
    (comint-previous-input 1)
    (comint-send-input)
    (other-window -1))

  #+END_SRC
** take a rest every some time
that blog also has some emacs elisp related doc gs
http://blog.cfw.io/Emacs/emacs-timer.html
** region as input to a shell commands
http://manuel-uberti.github.io/emacs/2016/12/03/xmllint/
#+BEGIN_SRC elisp
(defun mu-xml-format ()
  "Format an XML buffer with `xmllint'."
  (interactive)
  (shell-command-on-region (point-min) (point-max)
                           "xmllint -format -"
                           (current-buffer) t
                           "*Xmllint Error Buffer*" t))
#+END_SRC
* emacs slow
http://emacs.stackexchange.com/questions/12086/abnormally-large-savehist-file
I'm starting to use Spacemacs and occasionally I get stuck with Emacs beginning to require infinite amount of CPU and memory. Inspecting my .emacs.d/.cache folder reveals that the file savehist is 1.16 GB large... Deleting this file made Emacs work again.
* emacs windows and frames 
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html][Windows and Frames]]
[[https://blasphemousbits.wordpress.com/2007/05/04/learning-emacs-part-4-buffers-windows-and-frames/][buffers, windows, and frames]]


* paredit
http://overtone.github.io/emacs-live/doc-clojure-paredit.html
http://pub.gajendra.net/src/paredit-refcard.pdf
http://danmidwood.com/content/2014/11/21/animated-paredit.html
* backup
http://emacs.stackexchange.com/questions/20318/how-to-backup-bookmark-for-spacemacs

Spacemacs saves the bookmarks in ~/.emacs.d/.cache/bookmarks, and the recent files lise in ~/.emacs.d/.cache/recentf. You can copy these two files somewhere outside of ~/.emacs.d, and copy them back in after re-installing.

In fact, there might be more files in ~/.emacs.d/.cache that you'd like to save. I suggest backing up the entire ~/.emacs.d/.cache and restoring what you miss after re-installation.

For completeness, I'll mention that the locations of these two files are controlled by the variables bookmark-default-file and recentf-save-file.
* cider
** kill a process inside emacs cider
If you run C-c C-c inside *REPL* window (not _editor_ window), emacs will eventually cancel the top level repl command that is looping. This will take a while if it is a tight loop, and even longer if it is producing large amounts of output. But it will eventually stop the code without having to kill emacs
* magit
** git
*** src refspec master does not match any when pushing commits in git
http://stackoverflow.com/questions/4181861/src-refspec-master-does-not-match-any-when-pushing-commits-in-git
Try git show-ref to see what refs do you have. Is there refs/heads/master?

use 
git branch --list 
to check whether there are strange branch , if exists, then delete it
git branch -D branch_name
*** how to get the remote url
If referential integrity is intact:

git remote show origin

If referential integrity has been broken:

git config --get remote.origin.url
*** stash                                                             :stash:
| z   | Create new stash                    | Stashes are listed in the status buffer.                 |
| Z   | Create new stash and maintain state | Leaves current changes in working tree and staging area. |
| RET | View stash                          |                                                          |
| a   | Apply stash                         |                                                          |
| A   | Pop stash                           |                                                          |
| k   | Drop stash                          |                                                          |
*** git concept
http://marklodato.github.io/visual-git-guide/index-en.html
http://eagain.net/articles/git-for-computer-scientists/
**** different between reset and checkout
http://stackoverflow.com/questions/3639342/whats-the-difference-between-git-reset-and-git-checkout
HEAD is not the latest revision, it's the current revision. Usually, it's the latest revision of the current branch, but it doesn't have to be.
HEAD really just means "what is my repo currently pointing at". Thanks svick for the heads up on this one (no pun intended) 
In the event that the commit HEAD refers to is not the tip of any branch, this is called a "detached head".
HEAD is actually a special type of reference that points to another reference. It may point to master or it may not (it will point to whichever branch is currently checked out). If you know you want to be committing to the master branch then push to this.
A head is simply a reference to a commit object. Each head has a name (branch name or tag name, etc). By default, there is a head in every repository called master. A repository can contain any number of heads. At any given time, one head is selected as the “current head.” This head is aliased to HEAD, always in capitals".

Note this difference: a “head” (lowercase) refers to any one of the named heads in the repository; “HEAD” (uppercase) refers exclusively to the currently active head. This distinction is used frequently in Git documentation.

master is a name commonly given to the main branch, but it could be called anything else (or there could be no main branch).
master is a reference to the end of a branch. By convention (and by default) this is usually the main integration branch, but it doesn't have to be.

origin is a name commonly given to the main remote. remote is another repository that you can pull from and push to. Usually it's on some server, like github.
*** git command
**** revert to a specific file from a specific commit
this command will show all the commit history on a file
git log relative/path/to/a/file

then check out the file from that commit
git checkout 188ce04ddc3b5bd2e25ae1faa1e826d3bca05c92  relative/path/to/a/file

**** get the commit history for a sepecific developer
git log --author=daniel
*** about push
#+BEGIN_SRC shell
git config --global push.default simple
#+END_SRC

the default push action is based on the variable of push.default in configuration file
push.default
Defines the action git push should take if no refspec is explicitly given. Different values are well-suited for specific workflows; for instance, in a purely central workflow (i.e. the fetch source is equal to the push destination), upstream is probably what you want. Possible values are:

nothing - do not push anything (error out) unless a refspec is explicitly given. This is primarily meant for people who want to avoid mistakes by always being explicit.

current - push the current branch to update a branch with the same name on the receiving end. Works in both central and non-central workflows.

upstream - push the current branch back to the branch whose changes are usually integrated into the current branch (which is called @{upstream}). This mode only makes sense if you are pushing to the same repository you would normally pull from (i.e. central workflow).

simple - in centralized workflow, work like upstream with an added safety to refuse to push if the upstream branch’s name is different from the local one.

When pushing to a remote that is different from the remote you normally pull from, work as current. This is the safest option and is suited for beginners.

This mode has become the default in Git 2.0.

matching - push all branches having the same name on both ends. This makes the repository you are pushing to remember the set of branches that will be pushed out (e.g. if you always push maint and master there and no other branches, the repository you push to will have these two branches, and your local maint and master will be pushed there).

To use this mode effectively, you have to make sure all the branches you would push out are ready to be pushed out before running git push, as the whole point of this mode is to allow you to push all of the branches in one go. If you usually finish work on only one branch and push out the result, while other branches are unfinished, this mode is not for you. Also this mode is not suitable for pushing into a shared central repository, as other people may add new branches there, or update the tip of existing branches outside your control.

This used to be the default, but not since Git 2.0 (simple is the new default).
*** branch
**** delete a branch
git push origin --delete branch-name-7428
**** push a branch
when push a branch, shouldn't put the "origin" if not use src:dest format, since it will automatically add origin
git push feature/branch-name
**** push.default
**** push to muliptle branches
git push origin branchA branchB.
*** remote
git show-ref master
**** show remote information
git remote show origin
** key biddings
good link http://magit.vc/manual/magit-refcard.pdf
Having decided that Magit is the bee’s knees you’ll probably want to know the keyboard shortcuts.  Here are the most common ones:
C-c g Start magit (M-x magit-status)
s   Stage file
S   Stage all files
u   Unstage file
c   Commit staged files. C-c C-c after writing commit message or C-c C-k to abort. C-c C-a sdlkfjlkdfj
b b   To switch to a branch
b m   Rename branch
b d   Delete branch
b v   List branches (can checkout from resultant screen using RET)
P P   Git push
f f   Git fetch
F F   Git pull
TAB   Shows diff of file in the list or expand collapse section. Stage and unstage actually work on bits of the diff as well.
i   Ignore file (adds to .gitignore)
k   Delete. Deletes untracked file and stashes (on section header it deletes all untracked files). If you’re positioned in a diff for an uncommited file you can also delete just the hunk.  (discard a file)
l l   Show history
l L   Show history in verbose format
t t   Make lightweight tag
t a   Make annotated tag
x   Revert commit history to entered revision
z z   Create a stash
a a
A   Apply the stash and pop it off the stash list
z s   Creates a snapshot (the stash gets created but the working tree is not deleted.
w   Show how other branches related to the current one
m m   Start merging. In the event of conflicts resolve changes using e then stage with s.
R   Starts a rebase R c will continue a rebase. Stage resolved conflicts before continuing.
** evil-magit
https://github.com/justbur/evil-magit
or press "?" in the magit buffer, it will show all help, such as "x" means discard a change
** good magit command


*** check out file from different branch
run the following function, it will prompt for the branch and file to be checked out
magit-checkout-file

*** show change in a commit in the log history
in the log history, use "d"+"d" to see the history for a commit under the cursor.

*** show log history for a specific dev in magit
in the magit buffer, press "L", then it will show lots of options, and then press "=a" to input the dev name, press enter again to show all the logs for that author
** kill/delete/remove a commit
to remove the most recent commit
git reset --hard HEAD~1
http://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git

** get the commit history commits for the current file
in spacemacs, SPC + g + L will show the commit for the current file in the buffer, and then in the commit historical window, press Enter to get the information for each commit, then in the detailed window for that commit, press TAB to get the change details for the modified files
** run git command inside magit
in the magit window, press "!"
** copy commit hash value
C-w	Copy sha1 of current commit into kill ring
** good package
peep-dired
https://github.com/asok/peep-dired
** view the commit history for the file in the current buffer
the following command could see all the detailed commit information including author.
C-X v l
or just use git timemachine to view different commit
* erc/irc
** how to post multiple line
past the code in below link, and then past the url in irc
http://paste.lisp.org/new
* vi (evil)
** key bidding
Vim Commands Cheat Sheet

How to Exit

:q[uit]	Quit Vim. This fails when changes have been made.
:q[uit]!	Quit without writing.
:cq[uit]	Quit always, without writing.
:wq	Write the current file and exit.
:wq!	Write the current file and exit always.
:wq {file}	Write to {file}. Exit if not editing the last
:wq! {file}	Write to {file} and exit always.
:[range]wq[!]	[file] Same as above, but only write the lines in [range].
ZZ	Write current file, if modified, and exit.
ZQ	Quit current file and exit (same as ":q!").
Editing a File

:e[dit]	Edit the current file. This is useful to re-edit the current file, when it has been changed outside of Vim.
:e[dit]!	Edit the current file always. Discard any changes to the current buffer. This is useful if you want to start all over again.
:e[dit] {file}	Edit {file}.
:e[dit]! {file}	Edit {file} always. Discard any changes to the current buffer.
gf	Edit the file whose name is under or after the cursor. Mnemonic: "goto file".
Inserting Text

a	Append text after the cursor [count] times.
A	Append text at the end of the line [count] times.
i	Insert text before the cursor [count] times.
I	Insert text before the first non-blank in the line [count] times.
gI	Insert text in column 1 [count] times.
o	Begin a new line below the cursor and insert text, repeat [count] times.
O	Begin a new line above the cursor and insert text, repeat [count] times.
Inserting a file

:r[ead] [name]	Insert the file [name] below the cursor.
:r[ead] !{cmd}	Execute {cmd} and insert its standard output below the cursor.
Deleting Text

<Del> or
x	Delete [count] characters under and after the cursor
X	Delete [count] characters before the cursor
d{motion}	Delete text that {motion} moves over
dd	Delete [count] lines
D	Delete the characters under the cursor until the end of the line
{Visual}x or
{Visual}d	Delete the highlighted text (for {Visual} see Selecting Text).
{Visual}CTRL-H or
{Visual}	When in Select mode: Delete the highlighted text
{Visual}X or
{Visual}D	Delete the highlighted lines
:[range]d[elete]	Delete [range] lines (default: current line)
:[range]d[elete] {count}	Delete {count} lines, starting with [range]
Changing (or Replacing) Text

r{char}	replace the character under the cursor with {char}.
R	Enter Insert mode, replacing characters rather than inserting
~	Switch case of the character under the cursor and move the cursor to the right. If a [count] is given, do that many characters.
~{motion}	switch case of {motion} text.
{Visual}~	Switch case of highlighted text
Substituting

:[range]s[ubstitute]/{pattern}/{string}/[c][e][g][p][r][i][I] [count]	For each line in [range] replace a match of {pattern} with {string}.
:[range]s[ubstitute] [c][e][g][r][i][I] [count] :[range]&[c][e][g][r][i][I] [count]	Repeat last :substitute with same search pattern and substitute string, but without the same flags. You may add extra flags
The arguments that you can use for the substitute commands:
[c]  Confirm each substitution.  Vim positions the cursor on the matching
  string.  You can type:
      'y'      to substitute this match
      'n'      to skip this match
         to skip this match
      'a'      to substitute this and all remaining matches {not in Vi}
      'q'      to quit substituting {not in Vi}
      CTRL-E  to scroll the screen up {not in Vi}
      CTRL-Y  to scroll the screen down {not in Vi}.
[e]     When the search pattern fails, do not issue an error message and, in
  particular, continue in maps as if no error occurred.  
[g]  Replace all occurrences in the line.  Without this argument,
  replacement occurs only for the first occurrence in each line.
[i]  Ignore case for the pattern.  
[I]  Don't ignore case for the pattern.  
[p]  Print the line containing the last substitute.
Copying and Moving Text

"{a-zA-Z0-9.%#:-"}	Use register {a-zA-Z0-9.%#:-"} for next delete, yank or put (use uppercase character to append with delete and yank) ({.%#:} only work with put).
:reg[isters]	Display the contents of all numbered and named registers.
:reg[isters] {arg}	Display the contents of the numbered and named registers that are mentioned in {arg}.
:di[splay] [arg]	Same as :registers.
["x]y{motion}	Yank {motion} text [into register x].
["x]yy	Yank [count] lines [into register x]
["x]Y	yank [count] lines [into register x] (synonym for yy).
{Visual}["x]y	Yank the highlighted text [into register x] (for {Visual} see Selecting Text).
{Visual}["x]Y	Yank the highlighted lines [into register x]
:[range]y[ank] [x]	Yank [range] lines [into register x].
:[range]y[ank] [x] {count}	Yank {count} lines, starting with last line number in [range] (default: current line), [into register x].
["x]p	Put the text [from register x] after the cursor [count] times.
["x]P	Put the text [from register x] before the cursor [count] times.
["x]gp	Just like "p", but leave the cursor just after the new text.
["x]gP	Just like "P", but leave the cursor just after the new text.
:[line]pu[t] [x]	Put the text [from register x] after [line] (default current line).
:[line]pu[t]! [x]	Put the text [from register x] before [line] (default current line).
Undo/Redo/Repeat

u	Undo [count] changes.
:u[ndo]	Undo one change.
CTRL-R	Redo [count] changes which were undone.
:red[o]	Redo one change which was undone.
U	Undo all latest changes on one line. {Vi: while not moved off of it}
.	Repeat last change, with count replaced with [count].
Moving Around

Basic motion commands:

        k              
      h   l      
        j             
h or
[count] characters to the left (exclusive).
l or
or
[count] characters to the right (exclusive).
k or
or
CTRL-P	[count] lines upward
j or
or
CTRL-J or
or
CTRL-N	[count] lines downward (linewise).
0	To the first character of the line (exclusive).
<Home>	To the first character of the line (exclusive).
^	To the first non-blank character of the line
$ or
<End>	To the end of the line and [count - 1] lines downward
g0 or
g<Home>	When lines wrap ('wrap on): To the first character of the screen line (exclusive). Differs from "0" when a line is wider than the screen. When lines don't wrap ('wrap' off): To the leftmost character of the current line that is on the screen. Differs from "0" when the first character of the line is not on the screen.
g^	When lines wrap ('wrap' on): To the first non-blank character of the screen line (exclusive). Differs from "^" when a line is wider than the screen. When lines don't wrap ('wrap' off): To the leftmost non-blank character of the current line that is on the screen. Differs from "^" when the first non-blank character of the line is not on the screen.
g$ or
g<End&gr;	When lines wrap ('wrap' on): To the last character of the screen line and [count - 1] screen lines downward (inclusive). Differs from "$" when a line is wider than the screen. When lines don't wrap ('wrap' off): To the rightmost character of the current line that is visible on the screen. Differs from "$" when the last character of the line is not on the screen or when a count is used.
f{char}	To [count]'th occurrence of {char} to the right. The cursor is placed on {char} (inclusive).
F{char}	To the [count]'th occurrence of {char} to the left. The cursor is placed on {char} (inclusive).
t{char}	Till before [count]'th occurrence of {char} to the right. The cursor is placed on the character left of {char} (inclusive).
T{char}	Till after [count]'th occurrence of {char} to the left. The cursor is placed on the character right of {char} (inclusive).
;	Repeat latest f, t, F or T [count] times.
,	Repeat latest f, t, F or T in opposite direction [count] times.
- <minus>	[count] lines upward, on the first non-blank character (linewise).
+ or
CTRL-M or
<CR>	[count] lines downward, on the first non-blank character (linewise).
_ <underscore>	[count] - 1 lines downward, on the first non-blank character (linewise).
<C-End> or
G	Goto line [count], default last line, on the first non-blank character.
<C-Home> or
gg	Goto line [count], default first line, on the first non-blank character.
<S-Right> or
w	[count] words forward
<C-Right> or
W	[count] WORDS forward
e	Forward to the end of word [count]
E	Forward to the end of WORD [count]
<S-Left> or
b	[count] words backward
<C-Left> or
B	[count] WORDS backward
ge	Backward to the end of word [count]
gE	Backward to the end of WORD [count]
These commands move over words or WORDS.
A word consists of a sequence of letters, digits and underscores, or a sequence of other non-blank characters, separated with white space (spaces, tabs, ). This can be changed with the 'iskeyword' option.
A WORD consists of a sequence of non-blank characters, separated with white space. An empty line is also considered to be a word and a WORD.
(	[count] sentences backward
)	[count] sentences forward
{	[count] paragraphs backward
}	[count] paragraphs forward
]]	[count] sections forward or to the next '{' in the first column. When used after an operator, then the '}' in the first column.
][	[count] sections forward or to the next '}' in the first column
[[	[count] sections backward or to the previous '{' in the first column
[]	[count] sections backward or to the previous '}' in the first column
Marks

m{a-zA-Z}	Set mark {a-zA-Z} at cursor position (does not move the cursor, this is not a motion command).
m' or
m`	Set the previous context mark. This can be jumped to with the "''" or "``" command (does not move the cursor, this is not a motion command).
:[range]ma[rk] {a-zA-Z}	Set mark {a-zA-Z} at last line number in [range], column 0. Default is cursor line.
:[range]k{a-zA-Z}	Same as :mark, but the space before the mark name can be omitted.
'{a-z}	To the first non-blank character on the line with mark {a-z} (linewise).
'{A-Z0-9}	To the first non-blank character on the line with mark {A-Z0-9} in the correct file
`{a-z}	To the mark {a-z}
`{A-Z0-9}	To the mark {A-Z0-9} in the correct file
:marks	List all the current marks (not a motion command).
:marks {arg}	List the marks that are mentioned in {arg} (not a motion command). For example:
Searching

/{pattern}[/]	Search forward for the [count]'th occurrence of {pattern}
/{pattern}/{offset}	Search forward for the [count]'th occurrence of {pattern} and go {offset} lines up or down.
/<CR>	Search forward for the [count]'th latest used pattern
//{offset}<CR>	Search forward for the [count]'th latest used pattern with new. If {offset} is empty no offset is used.
?{pattern}[?]<CR>	Search backward for the [count]'th previous occurrence of {pattern}
?{pattern}?{offset}<CR>	Search backward for the [count]'th previous occurrence of {pattern} and go {offset} lines up or down
?<CR>	Search backward for the [count]'th latest used pattern
??{offset}<CR>	Search backward for the [count]'th latest used pattern with new {offset}. If {offset} is empty no offset is used.
n	Repeat the latest "/" or "?" [count] times.
N	Repeat the latest "/" or "?" [count] times in opposite direction.
Selecting Text (Visual Mode)

To select text, enter visual mode with one of the commands below, and use motion commands to highlight the text you are interested in. Then, use some command on the text.
The operators that can be used are:
  ~  switch case
  d  delete
  c  change
  y  yank
  >  shift right 
  <  shift left 
  !  filter through external command 
  =  filter through 'equalprg' option command 
  gq  format lines to 'textwidth' length 
v	start Visual mode per character.
V	start Visual mode linewise.
<Esc>	exit Visual mode without making any changes
How to Suspend

CTRL-Z	Suspend Vim, like ":stop". Works in Normal and in Visual mode. In Insert and Command-line mode, the CTRL-Z is inserted as a normal character.
:sus[pend][!] or
:st[op][!]	Suspend Vim. If the '!' is not given and 'autowrite' is set, every buffer with changes and a file name is written out. If the '!' is given or 'autowrite' is not set, changed buffers are not written, don't forget to bring Vim back to the foreground later!
* profile
** key biddings                                             :key:map:bidding:
in spacemacs, it will also pop some menu for pick up when there are mulitple choice for the same starting key.
;; Example of single key sequence
(defun comment-sexp ()
  "Comment out the sexp at point."
  (interactive)
  (save-excursion
    (mark-sexp)
    (paredit-comment-dwim)))

(global-set-key [f5] 'comment-sexp)
(global-set-key (kbd "<f7>") nil) ; good idea to put nil to the starting key
(global-set-key (kbd "<f7> <f7>") 'hs-toggle-hiding)
(global-set-key (kbd "<f8>") 'spacemacs/new-empty-buffer)
** inside function of dotspacemacs/user-config
*** enable line number
#+BEGIN_SRC elisp
(global-linum-mode)
#+END_SRC
* good tips
** emacs-smeargle
SPC + g + h + h
M-x smeargle

Highlight regions by last updated time.

M-x smeargle-commits

Highlight regions by age of changes.

* elisp
** show message in mini buff
(message "the message")
* email

** yahoo
Incoming Mail (IMAP) Server
Server - imap.mail.yahoo.com
Port - 993
Requires SSL - Yes
Outgoing Mail (SMTP) Server

Server - smtp.mail.yahoo.com
Port - 465 or 587
Requires SSL - Yes
Requires authentication - Yes<2015-12-21 Mon>
* search/grep
** how to search recusively
http://emacs.stackexchange.com/questions/7964/helm-projectile-ag-how-can-i-refine-the-grep-results-further
* dired
sort files in dired mode: ‘s’ to toggle between alphabetical and date order and with prefix argument, edit listing switches

