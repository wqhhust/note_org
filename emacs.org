* linux
** monitor
*** check system log
many logs are under the directory of /var/log/
and we could get the system log from /var/log/messages.
** performance
*** get process status
http://unix.stackexchange.com/questions/245827/spstack-ptrace-stopped-a-process
+ ps aux
+ grep State: /proc/the-pid/status. Is it State: T (stopped) or State:	t (tracing stop) ?
*** perf
perf record -g -e cpu-clock -p PID
https://perf.wiki.kernel.org/index.php/Main_Page
https://fritshoogland.wordpress.com/2013/11/24/when-the-oracle-wait-interface-isnt-enough/
*** ptrace/pstack
https://idea.popcount.org/2012-12-11-linux-process-states/
*** cgroup
https://en.wikipedia.org/wiki/Cgroups
* database
** SQL Server
*** performance
**** get the running SQL
#+BEGIN_SRC sql
  SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
 
  SELECT  er.wait_time/1000/60.0 wait_time_in_minutes,er.statement_end_offset, [Individual Query] = SUBSTRING(qt.text, er.statement_start_offset / 2,
                                         ( CASE WHEN er.statement_end_offset = -1
                                                THEN LEN(CONVERT(NVARCHAR(MAX), qt.text))
                                                     ,* 2
                                                ELSE er.statement_end_offset
                                           END - er.statement_start_offset ) / 2) ,
          [Parent Query] = qt.text ,
          Program = program_name ,
          db_name(database_id) as 'database name',
          session_id,
          Hostname ,
          nt_domain ,
          start_time,
          er.status,
          er.wait_resource,
          er.wait_type,
          pl.*
  FROM    sys.dm_exec_requests er
          INNER JOIN sys.sysprocesses sp ON er.session_id = sp.spid
          CROSS APPLY sys.dm_exec_sql_text(er.sql_handle) AS qt
          CROSS APPLY sys.dm_exec_query_plan(er.plan_handle) AS pl
  WHERE   session_Id > 50              -- Ignore system spids.
          AND session_Id NOT IN ( @@SPID )     -- Ignore this current statement.
              --and db_name(database_id)='some database'
  ORDER BY 1 , 2
 
#+END_SRC
** vertica
*** admin
**** force startup
try to start the node with force option from below command, it will remove corrupted blocks(data) from the node and will recover from its buddy node

To Start Node with force option:
----------------------------------------------

$ admintools -t restart_node -s <node1 ip> -d <dbname> -F
*** locks
**** temp table use less or no global catalog locks
#+BEGIN_SRC sql 
drop table if exists aaa;
select object_name,mode,count(*) from dc_lock_attempts where session_id=CURRENT_SESSION()  group by object_name,mode;
create local temp table aaa  ON COMMIT PRESERVE ROWS as select * from locks where 0=1;
select object_name,mode,count(*) from dc_lock_attempts where session_id=CURRENT_SESSION()  group by object_name,mode;
insert into aaa select * from locks;
select object_name,mode,count(*) from dc_lock_attempts where session_id=CURRENT_SESSION()  group by object_name,mode;

select object_name,mode,count(*) from dc_lock_attempts where session_id=CURRENT_SESSION()  group by object_name,mode;
drop table if exists aaa;
create table aaa   as select * from locks where 0=1;
select object_name,mode,count(*) from dc_lock_attempts where session_id=CURRENT_SESSION()  group by object_name,mode;
insert into aaa select * from locks;
select object_name,mode,count(*) from dc_lock_attempts where session_id=CURRENT_SESSION()  group by object_name,mode;

#+END_SRC
*** good document
**** from twitter
https://github.com/jackghm/Vertica/wiki/HP-Vertica-Tips,-Tricks,-and-Best-Practices
https://github.com/jackghm/Vertica/wiki/Optimize-Tables-Not-Queries
** postgresql
http://bluetreble.com/2015/12/mongodbs-bi-connector-postgres/
http://theplateisbad.blogspot.com/2015/12/the-mongodb-bi-analytics-connector.html
* lang
** python
*** scrapy
**** orc                                                             :orc:
https://webscraping.com/blog/Solving-CAPTCHA/
https://webscraping.com/blog/Automating-CAPTCHAs/
http://deathbycaptcha.com/user/faq
**** browsercookie                             :cookie:login:save:session:
Loads cookies from your browser into a cookiejar object so can download with urllib and other libraries the same content you see in the web browser.
https://pypi.python.org/pypi/browsercookie
https://bitbucket.org/richardpenman/browsercookie
**** How to crawl websites without being blocked

Speed
If you download 1 webpage a day then you will not be blocked but your crawl would take too long to be useful. If you instead used threading to crawl multiple URLs asynchronously then they might mistake you for a DOS attack and blacklist your IP. So what is the happy medium? The wikipedia article on web crawlers currently states Anecdotal evidence from access logs shows that access intervals from known crawlers vary between 20 seconds and 34 minutes. This is a little slow and I have found 1 download every 5 seconds is usually fine. If you don't need the data quickly then use a longer delay to reduce your risk and be kinder to their server.

Identity
Websites do not want to block genuine users so you should try to look like one. Set your user-agent to a common web browser instead of using the library default (such as wget/version or urllib/version). You could even pretend to be the Google Bot (only for the brave): Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)
If you have access to multiple IP addresses (for example via proxies) then distribute your requests among them so that it appears your downloading comes from multiple users.

Consistency
Avoid accessing webpages sequentially: /product/1, /product/2, etc. And don't download a new webpage exactly every N seconds. Both of these mistakes can attract attention to your downloading because a real user browses more randomly. So make sure to crawl webpages in an unordered manner and add a random offset to the delay between downloads.

Following these recommendations will allow you to crawl most websites without being detected.
**** Python Scrapy tutorial KeyError: 'Spider not found:
http://stackoverflow.com/questions/26359598/python-scrapy-tutorial-keyerror-spider-not-found
**** How to teach yourself web scraping



https://webscraping.com/blog/How-to-teach-yourself-web-scraping/

*** database
**** postgresql
***** install python driver for postgresql

*** functional
**** TODO transducer
http://sixty-north.com/blog/deriving-transducers-from-first-principles
** java
*** top blogger
http://www.programcreek.com/2012/11/top-100-java-developers-blogs/
** clojure
*** stacktrace
https://github.com/mmcgrana/clj-stacktrace
If you use Leiningen, you can install clj-stacktrace on a user-wide basis. Just add the following to ~/.lein/profiles.clj:

#+BEGIN_SRC clojure
{:user {:dependencies [[clj-stacktrace "0.2.8"]]
        :injections [(let [orig (ns-resolve (doto 'clojure.stacktrace require)
                                            'print-cause-trace)
                           new (ns-resolve (doto 'clj-stacktrace.repl require)
                                           'pst)]
                       (alter-var-root orig (constantly (deref new))))]}}
#+END_SRC

*** IO
read: slurp,  write: spit
user=> (spit "blubber.txt" "test")
nil
user=> (slurp "blubber.txt")
"test"

*** jdbc
**** insert/update timestamp
http://stackoverflow.com/questions/9305541/clojure-jdbc-postgresql-i-am-trying-to-update-a-timestamp-value-in-postgresql-f

Use [clj-time "0.3.6"] as the dependency specifier in your project.clj if you decide to use clj-time.
#+BEGIN_SRC clojure
(require '[clj-time [format :as timef] [coerce :as timec]])

(->> "Thu Feb 09 10:38:01 +0000 2012"
     (timef/parse (timef/formatter "EEE MMM dd HH:mm:ss Z yyyy"))
     timec/to-timestamp)
#+END_SRC
or
#+BEGIN_SRC clojure
(java.sql.Timestamp/valueOf "2004-10-19 10:23:54")
#+END_SRC

You'll need to pass in a java.sql.Timestamp instance. To parse your string into one using clj-time, a Joda-Time-wrapping library for Clojure, you'd do something along the following lines:

(require '[clj-time [format :as timef] [coerce :as timec]])
(->> "Thu Feb 09 10:38:01 +0000 2012"
     (timef/parse (timef/formatter "EEE MMM dd HH:mm:ss Z yyyy"))
     timec/to-timestamp)
The returned value can then be passed to PostgreSQL via JDBC.

In case you're obtaining the date in some other string format and converting it to this one, you could skip the conversion and provide an appropriate formatter for the original representation. There are quite a few available by default in the clj-time.format/formatters map, say (clj-time.format/show-formatters) at the REPL to see a list with examples. Also, clj-time.coerce/from-string tries all default formatters in sequence returning the value of the first succeeding parse (nil if there is none). If you're obtaining the date as a java.util.Date or a long, see from-date and from-long in the same namespace.


Alternatively, you could use some other way of parsing your timestamp string into a java.sql.Timestamp; Timestamp itself can parse a different string representation:

(java.sql.Timestamp/valueOf "2004-10-19 10:23:54")
clj-time is the most sane way of dealing with date and time in Clojure, though, so it's likely to be worth your while.
*** java object
**** how to get a field from a java object
for example: the following is an Element whole webelement field is nil, then how to check whether an object whose name id td hsa webelement as nil?
#clj_webdriver.element.Element{:webelement nil}
use the following: just use the keyword to get the field of that object.
(nil? (:webelement td))
*** parse int, float
Float/parseFloat
Integer/parseInt
*** destruct
http://blog.brunobonacci.com/2014/11/16/clojure-complete-guide-to-destructuring/
**** map destruct                                               :destruct:
(defn find-team-member[ {:keys [min max]} ] 
	(println min max))
*** dynamic scoping
http://clojure.org/vars
https://blog.rjmetrics.com/2012/01/11/lexical-vs-dynamic-scope-in-clojure/
http://blog.josephwilk.net/clojure/isolating-external-dependencies-in-clojure.html
http://squirrel.pl/blog/2012/09/13/careful-with-def-in-clojure/
https://www.reddit.com/r/Clojure/comments/zty5f/careful_with_def_in_clojure/c67uovl
http://stackoverflow.com/questions/940712/redefining-a-letd-variable-in-clojure-loop
**** def 
 http://stackoverflow.com/questions/16447621/difference-between-using-def-to-update-a-var-and-alter-var-root
*** tranduce
http://stackoverflow.com/questions/34238843/transduce-why-this-transduce-doesnt-print-anything
Composition of the transformer runs right-to-left but builds a transformation stack that is applied left-to-right (filtering happens before mapping in this example).
the following code return empty, since it first run take-while and then run map

#+BEGIN_SRC clojure
(transduce (comp (take-while true?)
                     (map (fn[x] (println x) true))
                     )
               conj
               []
               (map inc (range 4)))
#+END_SRC
 
*** good tips
**** how to convert [1 2 3 [4 5]] to [1 2 3 4 5]
2 solutions, and flatten could be use for a vector anywhere in the list, instead of only in the end of the list.
#+BEGIN_SRC clojure
  (apply list* [1 2 3 [4 5]])
  (flatten [1 2 3 [4 5]])
#+END_SRC
or flatten
**** how to call (j/execute! db ["sql" a-vector]
(j/execute! db (concat ["sql"] a-vector))
**** select an element from a class
{:xpath "//table[@class='someclass']"}
**** select an element contains some text
//*[contains(text(),'ABC')]
http://stackoverflow.com/questions/3655549/xpath-containstext-some-string-doesnt-work-when-used-with-node-with-more
**** select an element for a class and with certain text
//span[contains(@class, 'myclass') and text() = 'qwerty']
//span[contains(@class, 'myclass') and normalize-space(text()) = 'qwerty']
http://stackoverflow.com/questions/16466083/html-xpath-searching-by-class-and-text
**** select an element after an elemnt containing some text
the last p means select the p node after the p node containing 历史统计
//p[contains(text(),'历史统计')]/following-sibling::p
**** select an element based on the child element
(find-element {:xpath "//i[@class='xueli']/parent::*"})
**** how to update an element in a vector
(update-in [1 2 3] [1] inc)
(assoc [1 2 3] 1 5)
http://stackoverflow.com/questions/12628286/simple-way-to-replace-nth-element-in-a-vector-in-clojure
**** get sub vector from a vector



if the index of the subvec is continous,  then just use the function of subvec
#+BEGIN_SRC clojure
(let [a [11 22 33 44]
      b [1 3]]
  (mapv a b))
#+END_SRC

*** threading first/last                                          :threading:
**** good artical
http://ianrumford.github.io/blog/2014/10/24/some-syntactic-sugar-for-clojure-threading-macros/
http://blog.jayfields.com/2012/09/clojure-refactoring-from-thread-last-to.html
http://www.spacjer.com/blog/2015/11/09/lesser-known-clojure-variants-of-threading-macro/
*** core.async

**** starting point
http://www.braveclojure.com/core-async/
http://elbenshira.com/blog/using-core-async-for-producer-consumer-workflows/
**** blogs
http://clojure.com/blog/2013/06/28/clojure-core-async-channels.html
http://martintrojer.github.io/clojure/2013/07/07/coreasync-and-blocking-io/
http://hueypetersen.com/posts/2013/07/10/code-read-of-core-async-timeouts/
http://stuartsierra.com/2013/12/08/parallel-processing-with-core-async
http://www.laliluna.com/articles/2014/04/28/clojure-async-kindergarden-party.html
**** good site
http://martintrojer.github.io/tags.html#core.async-ref
*** good blogs
http://ianrumford.github.io/
*** my questions
**** def
*question*:
 I defined a var like (def firefox_brower some_specificiation_for_firefox)
 and used core.aysnc, and then I found the code of (def firef...) run twice,
 since I saw two firefox stared up since core.async could kick off multiple threads, so will (def ...)
         run for each thread?
 If I run lein repl, then I only saw one firefox.
 but if run lein run, it will startup 2 firefox. But the main function
         doesn't call any code to startup firefox, only some code for
         core.async
*answer*
<justin_smith>  generally you shouldn't ever have side effects at the
               top level - for example that def would start up firefox while
               building an uberjar or running your tests (probably not things
               you want)  [01:49]
<justin_smith>  a common way to deal with this are to use an atom or
               delay or promise that will hold the firefox-browser value, then
               an init function (called in your -main) that actually starts up
               firefox and connects your handle to the container  [01:52]
**** get current thread information
(get-thread-bindings)
*** some function
**** constantly
https://medium.com/@davidrupp/clojure-alter-var-root-and-constantly-d8c5b48fda02#.6ne8b6stx
*** promo
https://www.booleanknot.com/blog/2015/12/21/encapsulation-and-clojure-part-1.html
http://fn-code.blogspot.com/2015/10/my-concern-with-concerns.html
*** web scraping                                          :scrape;scraping:
http://stackoverflow.com/questions/22168883/whats-the-best-way-of-scraping-data-from-a-website/22180602#22180602
**** good examples/projects 
https://github.com/dfuenzalida/lazada-scrape
https://github.com/davidsantiago/hickory
** TDD
http://www.rbcs-us.com/documents/Why-Most-Unit-Testing-is-Waste.pdf
http://martinfowler.com/articles/is-tdd-dead/
http://pythontesting..net/agile/is-tdd-dead/
http://www.pitheringabout.com/?p=1069

* emacs
** org mode
*** Export

**** html setting

***** control superscripts
Add the following at the beginning of your file.
#+OPTIONS: ^:nil
^:
Toggle TeX-like syntax for sub- and superscripts. If you write "^:{}", ‘a_{b}’ will be interpreted, but the simple ‘a_b’ will be left as it is (org-export-with-sub-superscripts). 
***** outline level
 #+OPTIONS: H:5
The above means html will export 5 level outline. And the default is 3 level outline.

The outline structure of the document as described in Document Structure, forms the basis for defining sections of the exported document. However, since the outline structure is also used for (for example) lists of tasks, only the first three outline levels will be used as headings. Deeper levels will become itemized lists. You can change the location of this switch globally by setting the variableorg-export-headline-levels, or on a per-file basis with a line

*** PlantUML (draw digram) 
workable setting on windows
#+BEGIN_SRC elisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . nil)
     (plantuml . t)
     (python . t)))
  (setq org-plantuml-jar-path
        (expand-file-name "D:\\Daniel\\lib\\plantuml.jar"))

#+END_SRC

Setup
With the latest version of Org-mode setup consists of adding plantuml to `org-babel-load-languages' with code like the following or through the customization interface.
Then download the jar file save it somewhere on your system, set `org-plantuml-jar-path' to point to this file.
#+BEGIN_SRC elisp

;; active Org-babel languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '(;; other Babel languages
   (plantuml . t)))
(setq org-plantuml-jar-path
      (expand-file-name "~/src/org/contrib/scripts/plantuml.jar"))

#+END_SRC
Usage
see http://plantuml.sourceforge.net/ for a variety of example usages, the following code block is an example of usage from within an Org-mode file.
#+begin_src plantuml :file tryout.png
  Alice -> Bob: synchronous call
  Alice ->> Bob: asynchronous call
#+end_src
#+results:file:tryout.png
*** to-do

*** edit source code
 C-c ' 
*** Table

**** How to move to end of cell
In org-mode, table cells are called *fields*. C-h a org field outputs a list of commands related to org tables fields.
The function org-forward-sentence is bound to M-e. When inside a table, it will jump to the end of the current field.
http://emacs.stackexchange.com/questions/18362/how-to-move-to-the-end-of-current-cell
** cider
*** kill a process inside emacs cider
If you run C-c C-c inside *REPL* window (not _editor_ window), emacs will eventually cancel the top level repl command that is looping. This will take a while if it is a tight loop, and even longer if it is producing large amounts of output. But it will eventually stop the code without having to kill emacs
** magit
*** how to get the remote url
If referential integrity is intact:

git remote show origin

If referential integrity has been broken:

git config --get remote.origin.url
*** stash                                      :stash:
| z   | Create new stash                    | Stashes are listed in the status buffer.                 |
| Z   | Create new stash and maintain state | Leaves current changes in working tree and staging area. |
| RET | View stash                          |                                                          |
| a   | Apply stash                         |                                                          |
| A   | Pop stash                           |                                                          |
| k   | Drop stash                          |                                                          |
*** git concept
http://marklodato.github.io/visual-git-guide/index-en.html
http://eagain.net/articles/git-for-computer-scientists/
**** different between reset and checkout
http://stackoverflow.com/questions/3639342/whats-the-difference-between-git-reset-and-git-checkout
HEAD is not the latest revision, it's the current revision. Usually, it's the latest revision of the current branch, but it doesn't have to be.
HEAD really just means "what is my repo currently pointing at". Thanks svick for the heads up on this one (no pun intended) 
In the event that the commit HEAD refers to is not the tip of any branch, this is called a "detached head".
HEAD is actually a special type of reference that points to another reference. It may point to master or it may not (it will point to whichever branch is currently checked out). If you know you want to be committing to the master branch then push to this.
A head is simply a reference to a commit object. Each head has a name (branch name or tag name, etc). By default, there is a head in every repository called master. A repository can contain any number of heads. At any given time, one head is selected as the “current head.” This head is aliased to HEAD, always in capitals".

Note this difference: a “head” (lowercase) refers to any one of the named heads in the repository; “HEAD” (uppercase) refers exclusively to the currently active head. This distinction is used frequently in Git documentation.

master is a name commonly given to the main branch, but it could be called anything else (or there could be no main branch).
master is a reference to the end of a branch. By convention (and by default) this is usually the main integration branch, but it doesn't have to be.

origin is a name commonly given to the main remote. remote is another repository that you can pull from and push to. Usually it's on some server, like github.
*** git command
**** revert to a specific file from a specific commit
this command will show all the commit history on a file
git log relative/path/to/a/file

then check out the file from that commit
git checkout 188ce04ddc3b5bd2e25ae1faa1e826d3bca05c92  relative/path/to/a/file

**** get the commit history for a sepecific developer
git log --author=daniel
*** key biddings
good link http://magit.vc/manual/magit-refcard.pdf
Having decided that Magit is the bee’s knees you’ll probably want to know the keyboard shortcuts.  Here are the most common ones:
C-c g Start magit (M-x magit-status)
s   Stage file
S   Stage all files
u   Unstage file
c   Commit staged files. C-c C-c after writing commit message or C-c C-k to abort. C-c C-a sdlkfjlkdfj
b b   To switch to a branch
b m   Rename branch
b d   Delete branch
b v   List branches (can checkout from resultant screen using RET)
P P   Git push
f f   Git fetch
F F   Git pull
TAB   Shows diff of file in the list or expand collapse section. Stage and unstage actually work on bits of the diff as well.
i   Ignore file (adds to .gitignore)
k   Delete. Deletes untracked file and stashes (on section header it deletes all untracked files). If you’re positioned in a diff for an uncommited file you can also delete just the hunk.  (discard a file)
l l   Show history
l L   Show history in verbose format
t t   Make lightweight tag
t a   Make annotated tag
x   Revert commit history to entered revision
z z   Create a stash
a a
A   Apply the stash and pop it off the stash list
z s   Creates a snapshot (the stash gets created but the working tree is not deleted.
w   Show how other branches related to the current one
m m   Start merging. In the event of conflicts resolve changes using e then stage with s.
R   Starts a rebase R c will continue a rebase. Stage resolved conflicts before continuing.
*** good magit command


**** check out file from different branch
run the following function, it will prompt for the branch and file to be checked out
magit-checkout-file

**** show change in a commit in the log history
in the log history, use "d"+"d" to see the history for a commit under the cursor.

**** show log history for a specific dev in magit
in the magit buffer, press "L", then it will show lots of options, and then press "=a" to input the dev name, press enter again to show all the logs for that author
*** kill/delete/remove a commit
to remove the most recent commit
git reset --hard HEAD~1
http://stackoverflow.com/questions/1338728/delete-commits-from-a-branch-in-git

*** get the commit history commits for the current file
in spacemacs, SPC + g + L will show the commit for the current file in the buffer, and then in the commit historical window, press Enter to get the information for each commit, then in the detailed window for that commit, press TAB to get the change details for the modified files
*** run git command inside magit
in the magit window, press "!"
** erc/irc
*** how to post multiple line
past the code in below link, and then past the url in irc
http://paste.lisp.org/new
** vi (evil)
*** key bidding
Vim Commands Cheat Sheet

How to Exit

:q[uit]	Quit Vim. This fails when changes have been made.
:q[uit]!	Quit without writing.
:cq[uit]	Quit always, without writing.
:wq	Write the current file and exit.
:wq!	Write the current file and exit always.
:wq {file}	Write to {file}. Exit if not editing the last
:wq! {file}	Write to {file} and exit always.
:[range]wq[!]	[file] Same as above, but only write the lines in [range].
ZZ	Write current file, if modified, and exit.
ZQ	Quit current file and exit (same as ":q!").
Editing a File

:e[dit]	Edit the current file. This is useful to re-edit the current file, when it has been changed outside of Vim.
:e[dit]!	Edit the current file always. Discard any changes to the current buffer. This is useful if you want to start all over again.
:e[dit] {file}	Edit {file}.
:e[dit]! {file}	Edit {file} always. Discard any changes to the current buffer.
gf	Edit the file whose name is under or after the cursor. Mnemonic: "goto file".
Inserting Text

a	Append text after the cursor [count] times.
A	Append text at the end of the line [count] times.
i	Insert text before the cursor [count] times.
I	Insert text before the first non-blank in the line [count] times.
gI	Insert text in column 1 [count] times.
o	Begin a new line below the cursor and insert text, repeat [count] times.
O	Begin a new line above the cursor and insert text, repeat [count] times.
Inserting a file

:r[ead] [name]	Insert the file [name] below the cursor.
:r[ead] !{cmd}	Execute {cmd} and insert its standard output below the cursor.
Deleting Text

<Del> or
x	Delete [count] characters under and after the cursor
X	Delete [count] characters before the cursor
d{motion}	Delete text that {motion} moves over
dd	Delete [count] lines
D	Delete the characters under the cursor until the end of the line
{Visual}x or
{Visual}d	Delete the highlighted text (for {Visual} see Selecting Text).
{Visual}CTRL-H or
{Visual}	When in Select mode: Delete the highlighted text
{Visual}X or
{Visual}D	Delete the highlighted lines
:[range]d[elete]	Delete [range] lines (default: current line)
:[range]d[elete] {count}	Delete {count} lines, starting with [range]
Changing (or Replacing) Text

r{char}	replace the character under the cursor with {char}.
R	Enter Insert mode, replacing characters rather than inserting
~	Switch case of the character under the cursor and move the cursor to the right. If a [count] is given, do that many characters.
~{motion}	switch case of {motion} text.
{Visual}~	Switch case of highlighted text
Substituting

:[range]s[ubstitute]/{pattern}/{string}/[c][e][g][p][r][i][I] [count]	For each line in [range] replace a match of {pattern} with {string}.
:[range]s[ubstitute] [c][e][g][r][i][I] [count] :[range]&[c][e][g][r][i][I] [count]	Repeat last :substitute with same search pattern and substitute string, but without the same flags. You may add extra flags
The arguments that you can use for the substitute commands:
[c]  Confirm each substitution.  Vim positions the cursor on the matching
  string.  You can type:
      'y'      to substitute this match
      'n'      to skip this match
         to skip this match
      'a'      to substitute this and all remaining matches {not in Vi}
      'q'      to quit substituting {not in Vi}
      CTRL-E  to scroll the screen up {not in Vi}
      CTRL-Y  to scroll the screen down {not in Vi}.
[e]     When the search pattern fails, do not issue an error message and, in
  particular, continue in maps as if no error occurred.  
[g]  Replace all occurrences in the line.  Without this argument,
  replacement occurs only for the first occurrence in each line.
[i]  Ignore case for the pattern.  
[I]  Don't ignore case for the pattern.  
[p]  Print the line containing the last substitute.
Copying and Moving Text

"{a-zA-Z0-9.%#:-"}	Use register {a-zA-Z0-9.%#:-"} for next delete, yank or put (use uppercase character to append with delete and yank) ({.%#:} only work with put).
:reg[isters]	Display the contents of all numbered and named registers.
:reg[isters] {arg}	Display the contents of the numbered and named registers that are mentioned in {arg}.
:di[splay] [arg]	Same as :registers.
["x]y{motion}	Yank {motion} text [into register x].
["x]yy	Yank [count] lines [into register x]
["x]Y	yank [count] lines [into register x] (synonym for yy).
{Visual}["x]y	Yank the highlighted text [into register x] (for {Visual} see Selecting Text).
{Visual}["x]Y	Yank the highlighted lines [into register x]
:[range]y[ank] [x]	Yank [range] lines [into register x].
:[range]y[ank] [x] {count}	Yank {count} lines, starting with last line number in [range] (default: current line), [into register x].
["x]p	Put the text [from register x] after the cursor [count] times.
["x]P	Put the text [from register x] before the cursor [count] times.
["x]gp	Just like "p", but leave the cursor just after the new text.
["x]gP	Just like "P", but leave the cursor just after the new text.
:[line]pu[t] [x]	Put the text [from register x] after [line] (default current line).
:[line]pu[t]! [x]	Put the text [from register x] before [line] (default current line).
Undo/Redo/Repeat

u	Undo [count] changes.
:u[ndo]	Undo one change.
CTRL-R	Redo [count] changes which were undone.
:red[o]	Redo one change which was undone.
U	Undo all latest changes on one line. {Vi: while not moved off of it}
.	Repeat last change, with count replaced with [count].
Moving Around

Basic motion commands:

        k              
      h   l      
        j             
h or
[count] characters to the left (exclusive).
l or
or
[count] characters to the right (exclusive).
k or
or
CTRL-P	[count] lines upward
j or
or
CTRL-J or
or
CTRL-N	[count] lines downward (linewise).
0	To the first character of the line (exclusive).
<Home>	To the first character of the line (exclusive).
^	To the first non-blank character of the line
$ or
<End>	To the end of the line and [count - 1] lines downward
g0 or
g<Home>	When lines wrap ('wrap on): To the first character of the screen line (exclusive). Differs from "0" when a line is wider than the screen. When lines don't wrap ('wrap' off): To the leftmost character of the current line that is on the screen. Differs from "0" when the first character of the line is not on the screen.
g^	When lines wrap ('wrap' on): To the first non-blank character of the screen line (exclusive). Differs from "^" when a line is wider than the screen. When lines don't wrap ('wrap' off): To the leftmost non-blank character of the current line that is on the screen. Differs from "^" when the first non-blank character of the line is not on the screen.
g$ or
g<End&gr;	When lines wrap ('wrap' on): To the last character of the screen line and [count - 1] screen lines downward (inclusive). Differs from "$" when a line is wider than the screen. When lines don't wrap ('wrap' off): To the rightmost character of the current line that is visible on the screen. Differs from "$" when the last character of the line is not on the screen or when a count is used.
f{char}	To [count]'th occurrence of {char} to the right. The cursor is placed on {char} (inclusive).
F{char}	To the [count]'th occurrence of {char} to the left. The cursor is placed on {char} (inclusive).
t{char}	Till before [count]'th occurrence of {char} to the right. The cursor is placed on the character left of {char} (inclusive).
T{char}	Till after [count]'th occurrence of {char} to the left. The cursor is placed on the character right of {char} (inclusive).
;	Repeat latest f, t, F or T [count] times.
,	Repeat latest f, t, F or T in opposite direction [count] times.
- <minus>	[count] lines upward, on the first non-blank character (linewise).
+ or
CTRL-M or
<CR>	[count] lines downward, on the first non-blank character (linewise).
_ <underscore>	[count] - 1 lines downward, on the first non-blank character (linewise).
<C-End> or
G	Goto line [count], default last line, on the first non-blank character.
<C-Home> or
gg	Goto line [count], default first line, on the first non-blank character.
<S-Right> or
w	[count] words forward
<C-Right> or
W	[count] WORDS forward
e	Forward to the end of word [count]
E	Forward to the end of WORD [count]
<S-Left> or
b	[count] words backward
<C-Left> or
B	[count] WORDS backward
ge	Backward to the end of word [count]
gE	Backward to the end of WORD [count]
These commands move over words or WORDS.
A word consists of a sequence of letters, digits and underscores, or a sequence of other non-blank characters, separated with white space (spaces, tabs, ). This can be changed with the 'iskeyword' option.
A WORD consists of a sequence of non-blank characters, separated with white space. An empty line is also considered to be a word and a WORD.
(	[count] sentences backward
)	[count] sentences forward
{	[count] paragraphs backward
}	[count] paragraphs forward
]]	[count] sections forward or to the next '{' in the first column. When used after an operator, then the '}' in the first column.
][	[count] sections forward or to the next '}' in the first column
[[	[count] sections backward or to the previous '{' in the first column
[]	[count] sections backward or to the previous '}' in the first column
Marks

m{a-zA-Z}	Set mark {a-zA-Z} at cursor position (does not move the cursor, this is not a motion command).
m' or
m`	Set the previous context mark. This can be jumped to with the "''" or "``" command (does not move the cursor, this is not a motion command).
:[range]ma[rk] {a-zA-Z}	Set mark {a-zA-Z} at last line number in [range], column 0. Default is cursor line.
:[range]k{a-zA-Z}	Same as :mark, but the space before the mark name can be omitted.
'{a-z}	To the first non-blank character on the line with mark {a-z} (linewise).
'{A-Z0-9}	To the first non-blank character on the line with mark {A-Z0-9} in the correct file
`{a-z}	To the mark {a-z}
`{A-Z0-9}	To the mark {A-Z0-9} in the correct file
:marks	List all the current marks (not a motion command).
:marks {arg}	List the marks that are mentioned in {arg} (not a motion command). For example:
Searching

/{pattern}[/]	Search forward for the [count]'th occurrence of {pattern}
/{pattern}/{offset}	Search forward for the [count]'th occurrence of {pattern} and go {offset} lines up or down.
/<CR>	Search forward for the [count]'th latest used pattern
//{offset}<CR>	Search forward for the [count]'th latest used pattern with new. If {offset} is empty no offset is used.
?{pattern}[?]<CR>	Search backward for the [count]'th previous occurrence of {pattern}
?{pattern}?{offset}<CR>	Search backward for the [count]'th previous occurrence of {pattern} and go {offset} lines up or down
?<CR>	Search backward for the [count]'th latest used pattern
??{offset}<CR>	Search backward for the [count]'th latest used pattern with new {offset}. If {offset} is empty no offset is used.
n	Repeat the latest "/" or "?" [count] times.
N	Repeat the latest "/" or "?" [count] times in opposite direction.
Selecting Text (Visual Mode)

To select text, enter visual mode with one of the commands below, and use motion commands to highlight the text you are interested in. Then, use some command on the text.
The operators that can be used are:
  ~  switch case
  d  delete
  c  change
  y  yank
  >  shift right 
  <  shift left 
  !  filter through external command 
  =  filter through 'equalprg' option command 
  gq  format lines to 'textwidth' length 
v	start Visual mode per character.
V	start Visual mode linewise.
<Esc>	exit Visual mode without making any changes
How to Suspend

CTRL-Z	Suspend Vim, like ":stop". Works in Normal and in Visual mode. In Insert and Command-line mode, the CTRL-Z is inserted as a normal character.
:sus[pend][!] or
:st[op][!]	Suspend Vim. If the '!' is not given and 'autowrite' is set, every buffer with changes and a file name is written out. If the '!' is given or 'autowrite' is not set, changed buffers are not written, don't forget to bring Vim back to the foreground later!
** profile
*** key biddings                                          :key:map:bidding:
in spacemacs, it will also pop some menu for pick up when there are mulitple choice for the same starting key.
;; Example of single key sequence
(global-set-key (kbd "<f7>") nil) ; good idea to put nil to the starting key
(global-set-key (kbd "<f7> <f7>") 'hs-toggle-hiding)
(global-set-key (kbd "<f8>") 'spacemacs/new-empty-buffer)

** good tips
*** emacs-smeargle
SPC + g + h + h
M-x smeargle

Highlight regions by last updated time.

M-x smeargle-commits

Highlight regions by age of changes.

** email

*** yahoo
Incoming Mail (IMAP) Server
Server - imap.mail.yahoo.com
Port - 993
Requires SSL - Yes
Outgoing Mail (SMTP) Server

Server - smtp.mail.yahoo.com
Port - 465 or 587
Requires SSL - Yes
Requires authentication - Yes<2015-12-21 Mon>
* misc
** google in China without block                            :google:goagent:
like goagent but better than it
https://github.com/XX-net/XX-Net
https://github.com/XX-net/XX-Net/wiki/%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95
** download youtube
http://en.savefrom.net/?rmode=false
* work
** TODO cr to read
FUS-12048 --- *important*
** alert extraction

measures
spStrDD: sp.SPCurrDD, sum
spOnHand: sp.SPCurrRetailOnHand,sum
spvalid: sp.SPCurrValidStoreItemComb,max
sptraited:sp.SPCurrTraitedStoreItemComb,max
--spWeeksOnHand: (case when spStrDD =0 then 0 else floor(spOnHand/spStrDD) end), max
posMaxTotalAdjQty: fn_max_over_time, totaladjqty,100, max *time rage is based on SP table instead of POS table, also need to add function of fn_max*
posDistinctOnHand: fn_distinct_count, HistOnHandQty, 28
fourWeeksSalesRate: fun_sum_over_time, posqty, 28, *need to exclude store id for temp_site_store_tdlinx*
salesRate: fourWeeksSalesRate/4
<2015-12-21 Mon 00:17>
conditions:
spstrdd >0 and spOnHand and spvalid=1 and sptraited=1 and posMaxTotalAdjQty>=15 and posDistinctOnHand <=2 and fourWeeksSalesRate =0
-- and spWeeksOnHand>10
and (case when spStrDD =0 then 0 else floor(spOnHand/spStrDD) end) > 10
and salesRate = 0
and groupings_index = 1
*** issues
**** period range: not based on the current table, but instead based on another table (SP)
solution: add another configuration about which table the period_key is based on<2015-12-20 Sun>.
**** for ntil on salesrate at item_group/store_type level, need to use a query id, but need to support time range.
**** need to filter based on RSI_TEMP_ASMID_STOREID (#temp_site_store_tdlinx)
solution: use store exclusive list?
**** period_key, the period_key of the alert is based on the max initial day of OSM table.
** deploy
ant -DsiloID= A_AHOLD_ALERT_DANIEL create-retailer-schema -Dremote.cp.db.host=ENGP3QA3 
* youyou
13 - 5 = 8: 2015/12/6
10 days: 2015/12/10

10 + 4 -5 =9: 2015/12/14
9 + 13 - 6  =16 : 2015/12/27 
* bible
** translation
http://baike.baidu.com/view/1485644.htm
http://baike.baidu.com/view/2775860.htm
http://baike.baidu.com/item/%E9%B2%8D%E5%BA%B7%E5%AE%81
** university
Harvard
http://baike.baidu.com/link?url=wzeERbHGRb7MzQUmLQwpnB7nFHihA1c9c6pbfZ_TIWiDqzWVAxjOLbcuInWMNocCWrcIWKcjkWNz72l0opEQ-q
Yale
http://baike.baidu.com/link?url=AvcoZKLnN8mIR6zfDrQOKO-IPifyZq-K3cr6cqC_80_FchVaa9NIBIXs9NpLxY-QIR_ZD8z1ii-huqr2mUihPa
* firefox
firebug plugin addon
** cookie                                                  :cookie:expired:
https://www.raymond.cc/blog/how-to-extend-firefox-and-internet-explorer-cookie-expiration-date/
or use firebug to modify
http://blog.petersondave.com/cookies/Session-Cookies-in-Chrome-Firefox-and-Sitecore/
*** TODO why firefox could extend the cookie after expire but firefox won't 
** profile
create profile, run the following command
firefox -P

cd .mozilla/firefox 
 rm -Rf 56018125
 cp -R mwad0hks.default 56018125

 rm -Rf 65013716
 cp -R mwad0hks.default 65013716
** selenium
https://github.com/SeleniumHQ/selenium/blob/master/java/CHANGELOG
** tor
http://stackoverflow.com/questions/22978074/using-selenium-webdriver-with-tor
