
* misc
** what version of django is installed
 #+BEGIN_SRC python
 python -c "import django; print(django.get_version())"
 #+END_SRC

* admin
** open a console (Repl)
#+BEGIN_SRC shell
python manage.py shell
python manage.py shell -i bpython
#+END_SRC
** startup the server
#+BEGIN_SRC shell
python manage.py runserver 0.0.0.0:5555
#+END_SRC
* tips
http://hirelofty.com/blog/6-tips-you-should-use-when-kicking-django-project/
* import in django shell
* confliction models

When import some model from django shell, it throws the following error
#+BEGIN_SRC example
>>> from dba.models import TestInfo as aaa
RuntimeError: Conflicting 'info' models in application 'dba': <class 'info.dba.models.TestInfo'> and <class 'dba.models.TestInfo'>.
#+END_SRC

The reason is that info is the top directory for django, so we need to put it also in the class hierarchy. 
The right code should be
#+BEGIN_SRC python
from info.dba.models import TestInfo as aaa
#+END_SRC

Since the file directory is:

#+BEGIN_SRC example
$ ls -l
total 8
drwxrwxr-x   31 test  110014533  1054 Oct 13 15:58 info
-rw-rw-r--    1 test  110014533   248 Oct 12 16:15 manage.py
drwxrwxr-x    8 test  110014533   272 Oct 11 21:17 media
drwxrwxr-x  142 test  110014533  4828 Oct 11 21:45 template
#+END_SRC
And the dba folder is under the fold of info, so it's info/dba, and the root directory should be the directory containing manager.py

* traceback
http://avilpage.com/2015/05/whats-so-good-about-django-traceback/
* models
** link to official model
https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.fieldsets
** create tables on database based on models
say dba is a module under django project, and then only sync the model under dba to database
#+BEGIN_SRC example
python manage.py makemigrations dba
python manage.py migrate dba
#+END_SRC
** get rows from database as model objects

#+BEGIN_SRC python
from info.dba.models import Schedule
a=Schedule.objects.all()
#+END_SRC
** defined customized default value

#+BEGIN_SRC python

def default_date():
    d = timezone.now().date() + timedelta(days = 1)
    t = datetime.combine(d, datetime.min.time())
    return t

class YouModel(models.Model):
    start_time = models.DateTimeField(blank=True, null=True, default=default_date)

#+END_SRC
** define sorted many to many
install sortedm2m
pip install django-sortedm2m
https://pypi.python.org/pypi/django-sortedm2m
** how to use multiple line help_text
http://stackoverflow.com/questions/2259137/how-to-add-an-html-class-to-a-django-forms-help-text
#+BEGIN_SRC python
from django.utils.safestring import mark_safe
field = models.TextField(help_text=mark_safe("some<br>html"))

#+END_SRC
* django-extensions
great package, better to install
https://github.com/django-extensions/django-extensions
start the shell using ptipython
#+BEGIN_SRC shell
python manage.py shell_plus --ptpython
#+END_SRC

#+BEGIN_SRC shell
pip install Werkzeug
python manage.py runserver_plus 0.0.0.0:8000
#+END_SRC
* migration
** clean up the schema for an app
https://realpython.com/blog/python/digging-deeper-into-migrations/
If you want to “undo” all the migrations for a particular app, you can migrate to a special migration called zero.

For example if you type:

#+BEGIN_SRC shell
./manage.py migrate historical_data zero
#+END_SRC

It will undo/reverse all the migrations for the historical_data app. In addition to using zero; you can also use any arbitrary migration, and if that migration is in the past then the database will be rolled back to the state of that migration, or rolled forward if the migration hasn’t yet ran. Pretty powerful stuff!
** get the sql for a migration file created by makemigrations
The last parameter is the migration name, which is the string uniquely identify a py file under migrations folder under that app. The following example will create sql for a py file whose file name is starting as "002", if there are 2 files starting with that string, then it will error out
#+BEGIN_SRC shell
python manage.py sqlmigrate orajob 002
#+END_SRC
* write customized management command
https://docs.djangoproject.com/en/1.10/howto/custom-management-commands/
simple code to accep command line parameter for a customized command
#+BEGIN_SRC python

from django.core.management.base import BaseCommand, CommandError

class Command(BaseCommand):
    help = 'Closes the specified poll for voting'

    def add_arguments(self, parser):
        parser.add_argument('poll_id', nargs='+', type=int)

    def handle(self, *args, **options):
        for poll_id in options['poll_id']:
            print poll_id

#+END_SRC
