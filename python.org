
* python env

** location of site-packages
http://stackoverflow.com/questions/122327/how-do-i-find-the-location-of-my-python-site-packages-directory

#+BEGIN_SRC python
import site
site.getsitepackages()
#+END_SRC
* emacs as IDE

** can not start inferior python process
https://github.com/syl20bnr/spacemacs/pull/7070/commits/4c142ac4beb12ce7bcebbe26889de4dd1b500dc1
https://github.com/syl20bnr/spacemacs/pull/7070
* functional
http://stackoverflow.com/questions/1550134/how-to-assign-a-variable-in-if-and-then-return-it-python
http://stackoverflow.com/questions/14105500/compressing-x-if-x-else-y-statement-in-python
* lxml (html parse)
** some useful links
http://stackoverflow.com/questions/22082275/using-python-how-can-i-get-the-text-of-an-xml-element-when-a-sibling-elements?rq=1
http://stackoverflow.com/questions/31009455/lxml-etree-find-closest-element-before?rq=1

** get parent of a node
element.getparent()
** get an element whose class name is regular expression
http://stackoverflow.com/questions/8226490/finding-html-element-with-class-using-lxml
** my questions on stackoverflow
http://stackoverflow.com/questions/39832587/python-lxml-how-to-get-text-from-a-element-which-has-a-child-element
* data structure
** list comprehension
*** list comprehension with nested loop
http://stackoverflow.com/documentation/python/5265/list-comprehensions#t=201610090335497609891
#+BEGIN_SRC example

[ expression for target1 in iterable1 [if condition1]
             for target2 in iterable2 [if condition2]...
             for targetN in iterableN [if conditionN] ]

#+END_SRC

#+BEGIN_SRC python
data = [[1, 2], [3, 4], [5, 6]]
output = []
for each_list in data:
    for element in each_list:
        output.append(element)
print(output)
# Out: [1, 2, 3, 4, 5, 6]
#+END_SRC
equals to
#+BEGIN_SRC python

data = [[1, 2], [3, 4], [5, 6]]
output = [element for each_list in data for element in each_list]
print(output)
# Out: [1, 2, 3, 4, 5, 6]

#+END_SRC
*** nsted list comprehensions
http://stackoverflow.com/documentation/python/5265/list-comprehensions#t=201610090335497609891
#+BEGIN_SRC example

 Nested List Comprehensions, unlike List Comprehensions with Nested Loops, are List
 Comprehensions within a list comprehension. The initial expression can be any arbitrary
 expression, including another list comprehension.


#+END_SRC

#+BEGIN_SRC python

#List Comprehension with nested loop
[x + y for x in [1, 2, 3] for y in [3, 4, 5]]
#Out: [4, 5, 6, 5, 6, 7, 6, 7, 8]

#Nested List Comprehension
[[x + y for x in [1, 2, 3]] for y in [3, 4, 5]]
#Out: [[4, 5, 6], [5, 6, 7], [6, 7, 8]]

#The Nested List one is same as

for y in [3, 4, 5]:
    temp = []
    for x in [1, 2, 3]:
        temp.append(x + y)
    l.append(temp)


#+END_SRC
** map
*** create a map using 2 lists
http://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python
#+BEGIN_SRC python
keys = ['a', 'b', 'c']
values = [1, 2, 3]
dictionary = dict(zip(keys, values))
#+END_SRC
*** combine multiple maps
http://stackoverflow.com/questions/38987/how-to-merge-two-python-dictionaries-in-a-single-expression
http://treyhunner.com/2016/02/how-to-merge-dictionaries-in-python/
#+BEGIN_SRC python
def merge_dicts(*dict_args):
    result = {}
    for dictionary in dict_args:
        result.update(dictionary)
    return result
#+END_SRC
*** remove keys whose value is empty
http://stackoverflow.com/questions/12118695/efficient-way-to-remove-keys-with-empty-values-from-a-dict
#+BEGIN_SRC python
a={1:3,3:5,5:None}
dict((k, v) for k, v in a.iteritems() if v)
#+END_SRC
* rabbitmq
http://stackoverflow.com/questions/12426927/pika-rabbitmq-setting-basic-qos-to-prefetch-1-still-appears-to-consume-all-me
* database
** insert a row to a table using a map data structure
http://stackoverflow.com/questions/9336270/using-a-python-dict-for-a-sql-insert-statement
#+BEGIN_SRC sql
placeholder = ", ".join(["%s"] * len(dict))
stmt = "insert into `{table}` ({columns}) values ({values});".format(table=table_name, columns=",".join(dict.keys()), values=placeholder)
cur.execute(stmt, list(dict.values()))
#+END_SRC
* common pitful
** loop inside a list
http://stackoverflow.com/questions/39941393/python-loop-a-list-of-list-and-assign-value-inside-the-loop
#+BEGIN_SRC python :results output
alist1 = [[1,2],[3,4],[5,6]]
for item in alist1:
    item=1
print(alist1)


alist2 = [[1,2],[3,4],[5,6]]
for item in alist2:
    item=item.append(10)
print(alist2)


alist3 = [[1,2],[3,4],[5,6]]
for item in alist3:
    item.append(10)
print(alist3)

#+END_SRC

#+RESULTS:
: [[1, 2], [3, 4], [5, 6]]
: [[1, 2, 10], [3, 4, 10], [5, 6, 10]]
: [[1, 2, 10], [3, 4, 10], [5, 6, 10]]
* debug
https://wiki.python.org/moin/DebuggingWithGdb
http://fedoraproject.org/wiki/Features/EasierPythonDebugging
http://python-manhole.readthedocs.io/en/latest/
https://pypi.python.org/pypi/pudb
* syntax
** How to use *args and **kwargs in Python
http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/
http://www.learnpython.org/en/Multiple_Function_Arguments
Or, How to use variable length argument lists in Python.

The special syntax, *args and **kwargs in function definitions is used to pass a variable number of arguments to a function. The single asterisk form (*args) is used to pass a non-keyworded, variable-length argument list, and the double asterisk form is used to pass a keyworded, variable-length argument list. Here is an example of how to use the non-keyworded form. This example passes one formal (positional) argument, and two more variable length arguments.
#+BEGIN_SRC example

def test_var_args(farg, *args):
    print "formal arg:", farg
    for arg in args:
        print "another arg:", arg

test_var_args(1, "two", 3)
Results:

formal arg: 1
another arg: two
another arg: 3

Here is an example of how to use the keyworded form. Again, one formal argument and two keyworded variable arguments are passed.

def test_var_kwargs(farg, **kwargs):
    print "formal arg:", farg
    for key in kwargs:
        print "another keyword arg: %s: %s" % (key, kwargs[key])

test_var_kwargs(farg=1, myarg2="two", myarg3=3)
Results:

formal arg: 1
another keyword arg: myarg2: two
another keyword arg: myarg3: 3

Using *args and **kwargs when calling a function

This special syntax can be used, not only in function definitions, but also when calling a function.

def test_var_args_call(arg1, arg2, arg3):
    print "arg1:", arg1
    print "arg2:", arg2
    print "arg3:", arg3

args = ("two", 3)
test_var_args_call(1, *args)
Results:

arg1: 1
arg2: two
arg3: 3
Here is an example using the keyworded form when calling a function:

def test_var_args_call(arg1, arg2, arg3):
    print "arg1:", arg1
    print "arg2:", arg2
    print "arg3:", arg3

kwargs = {"arg3": 3, "arg2": "two"}
test_var_args_call(1, **kwargs)
Results:

arg1: 1
arg2: two
arg3: 3

#+END_SRC
** __init__.py
*** meanings of __all__
http://stackoverflow.com/questions/44834/can-someone-explain-all-in-python
check the file of django.db.__iinit__.py
* logging
** log for exception
 http://stackoverflow.com/a/16417709/266185
 http://blog.tplus1.com/blog/2007/09/28/the-python-logging-module-is-much-better-than-print-statements/
#+BEGIN_SRC python :results output
import logging

def b():
    return 1/0
def a():
    b()
try:
    a()
except Exception as ex:
    logging.exception("something is wrong")

#+END_SRC

#+RESULTS:

* timezone

** get the time as PDT (day time saving)
#+BEGIN_SRC python :results output
 import pytz
 from datetime import datetime
 ptd = pytz.timezone("America/Los_Angeles")
 a= datetime.now(ptd)
 print a
#+END_SRC

#+RESULTS:
: 2016-10-25 00:15:01.870243-07:00

* closure
http://www.discoversdk.com/blog/closures-in-python-3
* questions
** escape %
I am using python 2.7.10

#+BEGIN_SRC example
[1:53]  
In [6]:     sql_string = """
  ...:     select dba_corpid_id,comments,
  ...:            date_format(start_time,'%Y%m%d') start_period,
  ...:            date_format(end_time,'%Y%m%d') end_period
  ...:     from dba_oooschedule
  ...:     where start_time >= str_to_date(%s, '%Y%m%d')
  ...:           and end_time <= str_to_date(%s, '%Y%m%d')
  ...:     """

In [7]: sql_string % (20120101,20130101)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-7-5cffa8ddeb2d> in <module>()
----> 1 sql_string % (20120101,20130101)

ValueError: unsupported format character 'Y' (0x59) at index 64
#+END_SRC

you have date format bits in your string which python is confusing as format characters
and those need to be preserved so you'd have to escape the ones you want to keep like `,'%%Y%%m%%d`

The first one is correct as it's correctly escaped, but the second one is wrong.

#+BEGIN_SRC python :results output
    sql_string = """
    select test_corpid_id,comments,
           date_format(start_time,'%%Y%%m%%d') start_period,
           date_format(end_time,'%%Y%%m%%d') end_period
    from test_oooschedule
    where start_time >= str_to_date(%s, '%%Y%%m%%d')
          and end_time <= str_to_date(%s, '%%Y%%m%%d')
    """
    sql_string = sql_string % (20130101, 20120101)
    print sql_string
#+END_SRC

#+RESULTS:
: 
: select test_corpid_id,comments,
:        date_format(start_time,'%Y%m%d') start_period,
:        date_format(end_time,'%Y%m%d') end_period
: from test_oooschedule
: where start_time >= str_to_date(20130101, '%Y%m%d')
:       and end_time <= str_to_date(20120101, '%Y%m%d')
: 



#+BEGIN_SRC python :results output
    sql_string = """
    select test_corpid_id,comments,
           date_format(start_time,'%Y%m%d') start_period,
           date_format(end_time,'%Y%m%d') end_period
    from test_oooschedule
    where start_time >= str_to_date(%s, '%Y%m%d')
          and end_time <= str_to_date(%s, '%Y%m%d')
    """
    sql_string = sql_string % (20130101, 20120101)
    print sql_string
#+END_SRC

#+RESULTS:

** __name__
__name__ is the module name
it include the package name also. So if there are subdirectory, then the module name could be some thing like directory.file_name
** meanings of %
 inside of file /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/MySQLdb/cursors.py
 It has the following code

 The meaning is just to replace every %s in the query with the params(args)
 #+BEGIN_SRC python
 query = query % tuple([db.literal(item) for item in args])
 #+END_SRC

#+BEGIN_SRC example
>>> a="test %s %s %s"
>>> a % ("1","2","3")
'test 1 2 3'
#+END_SRC
* coroutines
http://www.dabeaz.com/coroutines/Coroutines.pdf
