* change commit username 
http://stackoverflow.com/questions/750172/change-the-author-and-committer-name-and-e-mail-of-multiple-commits-in-git
#+BEGIN_SRC bash
git config --global user.name "you name"
git config --global user.email you@domain.com
git commit --amend --reset-author
git commit --amend --reset-author --no-edit
#+END_SRC


* combine multiple commits into one commit
http://stackoverflow.com/questions/6934752/combining-multiple-commits-before-pushing-in-gitr
What you want to do is referred to as "squashing" in git. There are lots of options when you're doing this (too many?) but if you just want to merge all of your unpushed commits into a single commit, do this:

git rebase -i origin/master
This will bring up your text editor (-i is for "interactive") with a file that looks like this:
#+BEGIN_SRC exameple

pick 16b5fcc Code in, tests not passing
pick c964dea Getting closer
pick 06cf8ee Something changed
pick 396b4a3 Tests pass
pick 9be7fdb Better comments
pick 7dba9cb All done

#+END_SRC

Change all the pick to squash except the first one:

#+BEGIN_SRC exameple
pick 16b5fcc Code in, tests not passing
squash c964dea Getting closer
squash 06cf8ee Something changed
squash 396b4a3 Tests pass
squash 9be7fdb Better comments
squash 7dba9cb All done
#+END_SRC
Save your file and exit your editor. Then another text editor will open to let you combine the commit messages from all of the commits into one big commit message.

* cherry pick
http://stackoverflow.com/questions/9339429/what-does-cherry-picking-a-commit-with-git-mean
Cherry picking in git means to choose a commit from one branch and apply it onto another.

This is in contrast with other ways such as merge and rebase which normally applies many commits onto a another branch.

Make sure you are on the branch you want apply the commit to.

git checkout master
Execute the following:

git cherry-pick <commit-hash>
Additional links:
